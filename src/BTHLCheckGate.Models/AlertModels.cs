/**
 * BTHL CheckGate - Alert and Notification Models
 * File: src/BTHLCheckGate.Models/AlertModels.cs
 * 
 * We define our data models for system alerts and notification management.
 * Our models provide comprehensive alerting capabilities for enterprise monitoring.
 * 
 * @author David St John <davestj@gmail.com>
 * @version 1.0.0
 * @since 2025-09-09
 * 
 * CHANGELOG:
 * 2025-09-09 - FEAT: Initial alert models for enterprise monitoring
 */

using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace BTHLCheckGate.Models
{
    /// <summary>
    /// We represent system alerts generated by monitoring threshold violations.
    /// Our model provides comprehensive alert information for operational response.
    /// </summary>
    public class SystemAlert
    {
        /// <summary>
        /// We assign a unique identifier to each alert
        /// </summary>
        [Required]
        public string Id { get; set; } = Guid.NewGuid().ToString();

        /// <summary>
        /// We record when this alert was first generated
        /// </summary>
        [Required]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// We track when this alert was last updated
        /// </summary>
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// We classify the severity level of this alert
        /// </summary>
        [Required]
        public AlertSeverity Severity { get; set; }

        /// <summary>
        /// We categorize the type of alert for proper routing
        /// </summary>
        [Required]
        public AlertType Type { get; set; }

        /// <summary>
        /// We provide a concise title describing the alert
        /// </summary>
        [Required]
        public string Title { get; set; } = string.Empty;

        /// <summary>
        /// We include detailed information about the alert condition
        /// </summary>
        [Required]
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// We identify the source component or service that generated this alert
        /// </summary>
        [Required]
        public string Source { get; set; } = string.Empty;

        /// <summary>
        /// We specify the hostname or system where this alert originated
        /// </summary>
        public string? Hostname { get; set; }

        /// <summary>
        /// We track the current status of this alert
        /// </summary>
        [Required]
        public AlertStatus Status { get; set; } = AlertStatus.Active;

        /// <summary>
        /// We store the metric value that triggered this alert
        /// </summary>
        public double? TriggerValue { get; set; }

        /// <summary>
        /// We record the threshold value that was exceeded
        /// </summary>
        public double? ThresholdValue { get; set; }

        /// <summary>
        /// We provide the unit of measurement for the trigger and threshold values
        /// </summary>
        public string? Unit { get; set; }

        /// <summary>
        /// We include additional context information for troubleshooting
        /// </summary>
        public Dictionary<string, object> Metadata { get; set; } = new();

        /// <summary>
        /// We record when this alert was acknowledged by an operator
        /// </summary>
        public DateTime? AcknowledgedAt { get; set; }

        /// <summary>
        /// We track who acknowledged this alert
        /// </summary>
        public string? AcknowledgedBy { get; set; }

        /// <summary>
        /// We record when this alert was resolved
        /// </summary>
        public DateTime? ResolvedAt { get; set; }

        /// <summary>
        /// We track who resolved this alert
        /// </summary>
        public string? ResolvedBy { get; set; }

        /// <summary>
        /// We include notes about the resolution
        /// </summary>
        public string? ResolutionNotes { get; set; }
    }

    /// <summary>
    /// We model summary statistics for alert management dashboards.
    /// Our structure provides essential alert metrics for operational oversight.
    /// </summary>
    public class AlertSummary
    {
        /// <summary>
        /// We count the total number of active alerts
        /// </summary>
        public int TotalActive { get; set; }

        /// <summary>
        /// We count critical severity alerts requiring immediate attention
        /// </summary>
        public int Critical { get; set; }

        /// <summary>
        /// We count warning severity alerts for monitoring
        /// </summary>
        public int Warning { get; set; }

        /// <summary>
        /// We count informational alerts for awareness
        /// </summary>
        public int Info { get; set; }

        /// <summary>
        /// We count alerts that have been acknowledged but not resolved
        /// </summary>
        public int Acknowledged { get; set; }

        /// <summary>
        /// We track the number of alerts resolved in the last 24 hours
        /// </summary>
        public int ResolvedLast24Hours { get; set; }

        /// <summary>
        /// We calculate the average time to acknowledge alerts
        /// </summary>
        public TimeSpan AverageAcknowledgeTime { get; set; }

        /// <summary>
        /// We calculate the average time to resolve alerts
        /// </summary>
        public TimeSpan AverageResolutionTime { get; set; }
    }

    /// <summary>
    /// We represent performance baseline data for trend analysis and capacity planning.
    /// Our model provides statistical insights into resource utilization patterns.
    /// </summary>
    public class PerformanceBaseline
    {
        /// <summary>
        /// We record when this baseline was calculated
        /// </summary>
        [Required]
        public DateTime CalculatedAt { get; set; }

        /// <summary>
        /// We specify the time period used for baseline calculation
        /// </summary>
        [Required]
        public int PeriodDays { get; set; }

        /// <summary>
        /// We provide CPU utilization baseline statistics
        /// </summary>
        [Required]
        public MetricBaseline CpuBaseline { get; set; } = new();

        /// <summary>
        /// We provide memory utilization baseline statistics
        /// </summary>
        [Required]
        public MetricBaseline MemoryBaseline { get; set; } = new();

        /// <summary>
        /// We provide disk utilization baseline statistics
        /// </summary>
        [Required]
        public MetricBaseline DiskBaseline { get; set; } = new();

        /// <summary>
        /// We provide network utilization baseline statistics
        /// </summary>
        [Required]
        public MetricBaseline NetworkBaseline { get; set; } = new();

        /// <summary>
        /// We include predicted resource requirements for capacity planning
        /// </summary>
        public CapacityPrediction? CapacityPrediction { get; set; }
    }

    /// <summary>
    /// We model statistical baseline data for individual metrics.
    /// Our structure provides comprehensive statistical analysis for monitoring thresholds.
    /// </summary>
    public class MetricBaseline
    {
        /// <summary>
        /// We calculate the average value over the baseline period
        /// </summary>
        public double Average { get; set; }

        /// <summary>
        /// We identify the minimum value observed
        /// </summary>
        public double Minimum { get; set; }

        /// <summary>
        /// We identify the maximum value observed
        /// </summary>
        public double Maximum { get; set; }

        /// <summary>
        /// We calculate the 95th percentile for threshold setting
        /// </summary>
        public double Percentile95 { get; set; }

        /// <summary>
        /// We calculate the 99th percentile for critical threshold setting
        /// </summary>
        public double Percentile99 { get; set; }

        /// <summary>
        /// We calculate the standard deviation for variability analysis
        /// </summary>
        public double StandardDeviation { get; set; }

        /// <summary>
        /// We identify the trend direction (increasing, decreasing, stable)
        /// </summary>
        public TrendDirection Trend { get; set; }

        /// <summary>
        /// We calculate the slope of the trend line
        /// </summary>
        public double TrendSlope { get; set; }
    }

    /// <summary>
    /// We model capacity planning predictions based on historical trends.
    /// Our structure provides forward-looking insights for resource planning.
    /// </summary>
    public class CapacityPrediction
    {
        /// <summary>
        /// We predict when CPU resources will reach 80% utilization
        /// </summary>
        public DateTime? CpuCapacityDate { get; set; }

        /// <summary>
        /// We predict when memory resources will reach 80% utilization
        /// </summary>
        public DateTime? MemoryCapacityDate { get; set; }

        /// <summary>
        /// We predict when disk resources will reach 80% utilization
        /// </summary>
        public DateTime? DiskCapacityDate { get; set; }

        /// <summary>
        /// We provide confidence levels for our predictions
        /// </summary>
        [Range(0, 100)]
        public double ConfidenceLevel { get; set; }

        /// <summary>
        /// We include recommendations for capacity management
        /// </summary>
        public List<string> Recommendations { get; set; } = new();
    }

    /// <summary>
    /// We represent paginated result sets for API responses.
    /// Our structure provides efficient data transfer with pagination metadata.
    /// </summary>
    /// <typeparam name="T">The type of data being paginated</typeparam>
    public class PagedResult<T>
    {
        /// <summary>
        /// We provide the current page of data
        /// </summary>
        [Required]
        public List<T> Data { get; set; } = new();

        /// <summary>
        /// We track the current page number
        /// </summary>
        public int CurrentPage { get; set; }

        /// <summary>
        /// We specify the number of items per page
        /// </summary>
        public int PageSize { get; set; }

        /// <summary>
        /// We provide the total number of items across all pages
        /// </summary>
        public int TotalItems { get; set; }

        /// <summary>
        /// We calculate the total number of pages
        /// </summary>
        [JsonIgnore]
        public int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);

        /// <summary>
        /// We indicate whether there is a previous page
        /// </summary>
        [JsonIgnore]
        public bool HasPreviousPage => CurrentPage > 1;

        /// <summary>
        /// We indicate whether there is a next page
        /// </summary>
        [JsonIgnore]
        public bool HasNextPage => CurrentPage < TotalPages;
    }

    /// <summary>
    /// We represent summary statistics for system metrics dashboards.
    /// Our model provides essential KPIs for executive reporting.
    /// </summary>
    public class SystemMetricsSummary
    {
        /// <summary>
        /// We record when this summary was generated
        /// </summary>
        [Required]
        public DateTime GeneratedAt { get; set; }

        /// <summary>
        /// We specify the time period covered by this summary
        /// </summary>
        [Required]
        public int PeriodHours { get; set; }

        /// <summary>
        /// We provide CPU utilization summary statistics
        /// </summary>
        [Required]
        public MetricSummary CpuSummary { get; set; } = new();

        /// <summary>
        /// We provide memory utilization summary statistics
        /// </summary>
        [Required]
        public MetricSummary MemorySummary { get; set; } = new();

        /// <summary>
        /// We provide disk utilization summary statistics
        /// </summary>
        [Required]
        public MetricSummary DiskSummary { get; set; } = new();

        /// <summary>
        /// We provide network utilization summary statistics
        /// </summary>
        [Required]
        public MetricSummary NetworkSummary { get; set; } = new();

        /// <summary>
        /// We include overall system health assessment
        /// </summary>
        [Required]
        public SystemHealthStatus OverallHealth { get; set; }

        /// <summary>
        /// We track the number of active alerts
        /// </summary>
        public int ActiveAlerts { get; set; }

        /// <summary>
        /// We monitor system uptime percentage
        /// </summary>
        [Range(0, 100)]
        public double UptimePercentage { get; set; }
    }

    /// <summary>
    /// We model summary statistics for individual metric types.
    /// Our structure provides essential statistical insights for reporting.
    /// </summary>
    public class MetricSummary
    {
        /// <summary>
        /// We calculate the average value over the summary period
        /// </summary>
        public double Average { get; set; }

        /// <summary>
        /// We identify the minimum value observed
        /// </summary>
        public double Minimum { get; set; }

        /// <summary>
        /// We identify the maximum value observed
        /// </summary>
        public double Maximum { get; set; }

        /// <summary>
        /// We track the current value
        /// </summary>
        public double Current { get; set; }

        /// <summary>
        /// We calculate the change from the previous period
        /// </summary>
        public double ChangePercent { get; set; }

        /// <summary>
        /// We indicate the trend direction for this metric
        /// </summary>
        public TrendDirection Trend { get; set; }
    }

    // Enumerations for classification and status tracking

    /// <summary>
    /// We define alert severity levels for proper prioritization
    /// </summary>
    public enum AlertSeverity
    {
        Info = 1,
        Warning = 2,
        Critical = 3
    }

    /// <summary>
    /// We define alert types for categorization and routing
    /// </summary>
    public enum AlertType
    {
        System,
        Performance,
        Security,
        Kubernetes,
        Infrastructure,
        Application
    }

    /// <summary>
    /// We define alert status values for lifecycle management
    /// </summary>
    public enum AlertStatus
    {
        Active,
        Acknowledged,
        Resolved,
        Suppressed
    }

    /// <summary>
    /// We define trend directions for capacity planning and analysis
    /// </summary>
    public enum TrendDirection
    {
        Increasing,
        Decreasing,
        Stable,
        Volatile
    }

    /// <summary>
    /// We define system health status levels for dashboard indicators
    /// </summary>
    public enum SystemHealthStatus
    {
        Excellent,
        Good,
        Warning,
        Critical,
        Unknown
    }
}